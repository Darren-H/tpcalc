{
  "name": "backbone.databinding",
  "title": "Backbone.DataBinding",
  "version": "0.4.5",
  "description": "The plugin implements a two-way data binding between views and models/collections.",
  "keywords": [
    "backbone",
    "binding",
    "collection",
    "data",
    "model",
    "plugin",
    "view"
  ],
  "homepage": "https://github.com/DreamTheater/Backbone.DataBinding",
  "bugs": {
    "url": "https://github.com/DreamTheater/Backbone.DataBinding/issues"
  },
  "author": {
    "name": "Dmytro Nemoga",
    "url": "https://github.com/DreamTheater"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DreamTheater/Backbone.DataBinding.git"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/DreamTheater/Backbone.DataBinding/blob/master/LICENSE"
  },
  "scripts": {
    "pretest": "./node_modules/.bin/grunt jshint concat uglify",
    "test": "./node_modules/.bin/grunt karma && ./node_modules/.bin/mocha test/**/*.test.js"
  },
  "dependencies": {
    "backbone": "~1.1.0",
    "underscore": "~1.5.2"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-karma": "~0.7.1",
    "jsdom": "~0.8.8",
    "karma-coverage": "~0.1.2",
    "karma-mocha": "~0.1.0",
    "mocha": "~1.14.0",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0"
  },
  "readme": "[npm-badge]: https://badge.fury.io/js/backbone.databinding.png\r\n[npm-link]: https://badge.fury.io/js/backbone.databinding\r\n\r\n[travis-badge]: https://secure.travis-ci.org/DreamTheater/Backbone.DataBinding.png\r\n[travis-link]: https://travis-ci.org/DreamTheater/Backbone.DataBinding\r\n\r\n[gemnasium-badge]: https://gemnasium.com/DreamTheater/Backbone.DataBinding.png\r\n[gemnasium-link]: https://gemnasium.com/DreamTheater/Backbone.DataBinding\r\n\r\n# Backbone.DataBinding\r\n\r\n[![NPM Version][npm-badge]][npm-link]\r\n[![Build Status][travis-badge]][travis-link]\r\n[![Dependency Status][gemnasium-badge]][gemnasium-link]\r\n\r\nThe plugin implements a two-way data binding between views and models/collections.\r\n\r\n**Dependencies:**\r\n\r\n  - [Backbone](https://github.com/documentcloud/backbone) `>= 1.1.0`\r\n  - [Underscore](https://github.com/documentcloud/underscore) `>= 1.5.2`\r\n  - [jQuery](https://github.com/jquery/jquery) `>= 2.0.3`\r\n\r\n## Getting Started\r\n### Create view and model\r\nDefine the view and the model. They should be an instances of `Backbone.View`/`Backbone.Model` or their inheritors.\r\n```js\r\nvar view = new Backbone.View(), model = new Backbone.Model();\r\n```\r\n\r\n### Create model binder\r\n`Backbone.ModelBinder` is a decorator. Just pass the view and the model into constructor of class to getting started.\r\n```js\r\nvar modelBinder = new Backbone.ModelBinder(view, model);\r\n```\r\n\r\n### Define bindings\r\nUse `modelBinder.watch(binding, options)` method to define bindings between view and model. If you want to define a lot of bindings in one action use `modelBinder.watch(bindings)` option.\r\n\r\n#### Binding types\r\n##### Type `html`\r\n```html\r\n<output name=\"html-content\"></output>\r\n```\r\n```js\r\nmodelBinder.watch('html: html-content', {\r\n    selector: '[name=\"html-content\"]'\r\n});\r\n\r\nmodel.set('html-content', 'HTML');\r\n```\r\n```html\r\n<output name=\"html-content\">HTML</output>\r\n```\r\n\r\n##### Type `text`\r\n```html\r\n<output name=\"text-content\"></output>\r\n```\r\n```js\r\nmodelBinder.watch('text: text-content', {\r\n    selector: '[name=\"text-content\"]'\r\n});\r\n\r\nmodel.set('text-content', 'Text');\r\n```\r\n```html\r\n<output name=\"text-content\">Text</output>\r\n```\r\n\r\n##### Type `value`\r\n###### Text input\r\n```html\r\n<input type=\"text\" name=\"text-field-value\">\r\n```\r\n```js\r\nmodelBinder.watch('value: text-field-value', {\r\n    selector: '[name=\"text-field-value\"]'\r\n});\r\n\r\nmodel.set('text-field-value', 'Value');\r\n```\r\n```html\r\n<input type=\"text\" name=\"text-field-value\" value=\"Value\">\r\n```\r\n\r\n###### Text area\r\n```html\r\n<textarea name=\"textarea-value\"></textarea>\r\n```\r\n```js\r\nmodelBinder.watch('value: textarea-value', {\r\n    selector: '[name=\"textarea-value\"]'\r\n});\r\n\r\nmodel.set('textarea-value', 'Text');\r\n```\r\n```html\r\n<textarea name=\"textarea-value\">Text</textarea>\r\n```\r\n\r\n###### Single select\r\n```html\r\n<select name=\"single-select-value\">\r\n    <option value=\"A\">Option A</option>\r\n    <option value=\"B\">Option B</option>\r\n    <option value=\"C\">Option C</option>\r\n</select>\r\n```\r\n```js\r\nmodelBinder.watch('value: single-select-value', {\r\n    selector: '[name=\"single-select-value\"]'\r\n});\r\n\r\nmodel.set('single-select-value', 'A');\r\n```\r\n```html\r\n<select name=\"single-select-value\">\r\n    <option value=\"A\" selected>Option A</option>\r\n    <option value=\"B\">Option B</option>\r\n    <option value=\"C\">Option C</option>\r\n</select>\r\n```\r\n\r\n###### Multiple select\r\n```html\r\n<select name=\"multiple-select-value\" multiple>\r\n    <option value=\"A\">Option A</option>\r\n    <option value=\"B\">Option B</option>\r\n    <option value=\"C\">Option C</option>\r\n</select>\r\n```\r\n```js\r\nmodelBinder.watch('value: multiple-select-value', {\r\n    selector: '[name=\"multiple-select-value\"]'\r\n});\r\n\r\nmodel.set('multiple-select-value', ['A', 'B', 'C']);\r\n```\r\n```html\r\n<select name=\"multiple-select-value\" multiple>\r\n    <option value=\"A\" selected>Option A</option>\r\n    <option value=\"B\" selected>Option B</option>\r\n    <option value=\"C\" selected>Option C</option>\r\n</select>\r\n```\r\n\r\n##### Type `checked`\r\n###### Single checkbox\r\n```html\r\n<input type=\"checkbox\" name=\"single-checkbox-checked\">\r\n```\r\n```js\r\nmodelBinder.watch('checked: single-checkbox-checked', {\r\n    selector: '[name=\"single-checkbox-checked\"]'\r\n});\r\n\r\nmodel.set('single-checkbox-checked', true);\r\n```\r\n```html\r\n<input type=\"checkbox\" name=\"single-checkbox-checked\" checked>\r\n```\r\n\r\n###### Multiple checkboxes\r\n```html\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"A\">\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"B\">\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"C\">\r\n```\r\n```js\r\nmodelBinder.watch('checked: checkbox-group-checked', {\r\n    selector: '[name=\"checkbox-group-checked\"]'\r\n});\r\n\r\nmodel.set('checkbox-group-checked', ['A', 'B', 'C']);\r\n```\r\n```html\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"A\" checked>\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"B\" checked>\r\n<input type=\"checkbox\" name=\"checkbox-group-checked\" value=\"C\" checked>\r\n```\r\n\r\n###### Radio buttons\r\n```html\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"A\">\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"B\">\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"C\">\r\n```\r\n```js\r\nmodelBinder.watch('checked: radio-button-checked', {\r\n    selector: '[name=\"radio-button-checked\"]'\r\n});\r\n\r\nmodel.set('radio-button-checked', 'A');\r\n```\r\n```html\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"A\" checked>\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"B\">\r\n<input type=\"radio\" name=\"radio-button-checked\" value=\"C\">\r\n```\r\n\r\n##### Type `visible`\r\n```html\r\n<button type=\"button\" name=\"button-visible\" hidden>Visible</button>\r\n```\r\n```js\r\nmodelBinder.watch('visible: button-visible', {\r\n    selector: '[name=\"button-visible\"]'\r\n});\r\n\r\nmodel.set('button-visible', true);\r\n```\r\n```html\r\n<button type=\"button\" name=\"button-visible\">Visible</button>\r\n```\r\n\r\n##### Type `hidden`\r\n```html\r\n<button type=\"button\" name=\"button-hidden\">Hidden</button>\r\n```\r\n```js\r\nmodelBinder.watch('hidden: button-hidden', {\r\n    selector: '[name=\"button-hidden\"]'\r\n});\r\n\r\nmodel.set('button-hidden', true);\r\n```\r\n```html\r\n<button type=\"button\" name=\"button-hidden\" hidden>Hidden</button>\r\n```\r\n\r\n##### Type `enabled`\r\n```html\r\n<button type=\"button\" name=\"button-enabled\" disabled>Enabled</button>\r\n```\r\n```js\r\nmodelBinder.watch('enabled: button-enabled', {\r\n    selector: '[name=\"button-enabled\"]'\r\n});\r\n\r\nmodel.set('button-enabled', true);\r\n```\r\n```html\r\n<button type=\"button\" name=\"button-enabled\">Enabled</button>\r\n```\r\n\r\n##### Type `disabled`\r\n```html\r\n<button type=\"button\" name=\"button-disabled\">Disabled</button>\r\n```\r\n```js\r\nmodelBinder.watch('disabled: button-disabled', {\r\n    selector: '[name=\"button-disabled\"]'\r\n});\r\n\r\nmodel.set('button-disabled', true);\r\n```\r\n```html\r\n<button type=\"button\" name=\"button-disabled\" disabled>Disabled</button>\r\n```\r\n\r\n#### Option `selector`\r\nSpecify selector to find element in the view's DOM tree. Leave selector empty to bind attribute to the root element of the view.\r\n```js\r\nmodelBinder.watch('...', {\r\n    selector: 'div.foo' // Any jQuery selector\r\n});\r\n```\r\n\r\n#### Option `event`\r\nSpecify events that you want to listen (by default equal to `'change'`).\r\n```js\r\nmodelBinder.watch('...', {\r\n    event: 'change input keyup' // Space separated event list\r\n});\r\n```\r\n\r\n#### Options `getter` and `setter`\r\nIf you want to define one-way binding you can disable `getter` (view-to-model binding) or `setter` (model-to-view binding).\r\n```js\r\nmodelBinder.watch('...', {\r\n    getter: false // In this case the model will not synchronizes with the element\r\n});\r\n```\r\n```js\r\nmodelBinder.watch('...', {\r\n    setter: false // In this case the element will not synchronizes with the model\r\n});\r\n```\r\n\r\n### Create view and collection\r\nDefine the view and the collection. They should be an instances of `Backbone.View`/`Backbone.Collection` or their inheritors.\r\n```js\r\nvar view = new Backbone.View(), collection = new Backbone.Collection();\r\n```\r\n\r\n### Create collection binder\r\n`Backbone.CollectionBinder` is a decorator. Just pass the view and the collection into constructor of class to getting started. Don't forget about options.\r\n```js\r\nvar collectionBinder = new Backbone.CollectionBinder(view, collection, {\r\n    view: Backbone.View.extend({ ... }),\r\n    dummy: Backbone.View.extend({ ... }),\r\n\r\n    selector: '...'\r\n});\r\n```\r\n\r\n#### Option `view`\r\nIt should be an instance of `Backbone.View` or its inheritor. It will represent each model in collection.\r\n\r\n#### Option `dummy`\r\nIt should be an instance of `Backbone.View` or its inheritor. It will used in case if collection is empty and no items to be shown.\r\n\r\n#### Option `selector`\r\nIf specified, views will be inserted into element corresponding this selector. If not, views will be inserted just to the root element of the view.\r\n\r\n### Start listening\r\nBy default `Backbone.CollectionBinder` listens four collection events: `add`, `remove`, `reset` and `sort`.\r\n```js\r\ncollectionBinder.listen();\r\n```\r\n\r\nIf you don't want to listen some events you should use an additional options.\r\n```js\r\ncollectionBinder.listen({\r\n    sort: false // In this case DOM will not react on collection's sorting\r\n});\r\n```\r\n\r\n## Changelog\r\n### 0.4.5\r\n  - `Backbone.ModelBinder` and `Backbone.CollectionBinder` could be extended\r\n\r\n### 0.4.4\r\n  - Added CommonJS support\r\n\r\n### 0.4.3\r\n  - Fixed a lot of issues\r\n\r\n### 0.4.2\r\n  - Renaming method `define` to `watch`\r\n  - Update API to getting views\r\n\r\n### 0.4.0\r\n  - `Backbone.ModelBinder` and `Backbone.CollectionBinder` configures with any model/collection\r\n\r\n### 0.3.9\r\n  - Fixed `checked` binding\r\n  - Using `attr()` instead of `prop()` for standard bindings\r\n\r\n### 0.3.7\r\n  - Renaming `types` to `handlers`\r\n  - Method `refresh` moved from view to binders\r\n  - Removed backward reference to binders\r\n\r\n### 0.3.4\r\n  - Fixed `visible`, `hidden`, `enabled`, `disabled` bindings\r\n\r\n### 0.3.3\r\n  - Plugin implemented as decorator, not a class\r\n  - Readers and writers merged into types\r\n  - Added new binding types `hidden`, `enabled`, `disabled`\r\n  - A lot of fixes\r\n\r\n### 0.2.9\r\n  - Readers and writers runs in context `this`\r\n  - Added binding type `visible`\r\n\r\n### 0.2.7\r\n  - Method `reset` renamed to `syncToCollection`\r\n  - Changed signature of method `binding`\r\n\r\n### 0.2.5\r\n  - Added public method `reset` for refreshing a list manually\r\n\r\n### 0.2.4\r\n  - Added views allocation inside the root element\r\n\r\n### 0.2.3\r\n  - Methods `sort` and `reset` are private\r\n\r\n### 0.2.2\r\n  - `ViewCollection` is sortable\r\n  - Method `reset` is public\r\n  - Removed binding type `data`\r\n\r\n### 0.1.9\r\n  - Items removes via collection's listener and not model's\r\n  - Added binding type `data`\r\n\r\n### 0.1.7\r\n  - Properties `readers` and `writers` are static\r\n\r\n### 0.1.6\r\n  - Removed CommonJS support\r\n  - Databinding moved to `Backbone.ViewModel` class\r\n  - Added `Backbone.ViewCollection` class\r\n\r\n### 0.1.3\r\n  - Added CommonJS support\r\n\r\n### 0.1.2\r\n  - Methods `delegateBindings` and `undelegateBindings` are public\r\n\r\n### 0.1.1\r\n  - Method `addBinding` renamed to `binding`\r\n\r\n### 0.1.0\r\n  - Initial release\r\n",
  "readmeFilename": "README.md",
  "_id": "backbone.databinding@0.4.5",
  "dist": {
    "shasum": "3521cdf86424c288402f2de1fcadf74ca3a6755d"
  },
  "_from": "backbone.databinding@",
  "_resolved": "https://registry.npmjs.org/backbone.databinding/-/backbone.databinding-0.4.5.tgz"
}
