{
  "name": "backbone.stickit",
  "description": "Model binding in Backbone style.",
  "version": "0.8.0",
  "author": {
    "name": "Matthew DeLambo",
    "email": "delambo@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nytimes/backbone.stickit"
  },
  "main": "backbone.stickit.js",
  "peerDependencies": {
    "underscore": ">=1.4.2",
    "backbone": ">=0.9.0"
  },
  "devDependencies": {
    "grunt-contrib": "~0.4.0",
    "grunt-docco": "~0.3.0",
    "grunt": "~0.4.2",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-qunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.1.2",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-compress": "~0.5.3"
  },
  "bugs": {
    "url": "http://github.com/nytimes/backbone.stickit/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nytimes/backbone.stickit/blob/master/LICENSE"
    }
  ],
  "readme": "[-> **Documentation for current/stable release: 0.8.0**](http://nytimes.github.com/backbone.stickit/)\n\n**The following is documentation for the code in master/edge version...**\n\n## Introduction\n\nBackbone's philosophy is for a View, the display of a Model's state, to re-render after any changes have been made to the Model. This works beautifully for simple apps, but rich apps often need to render, respond, and synchronize changes with finer granularity.\n\nStickit is a Backbone data binding plugin that binds Model attributes to View elements with a myriad of options for fine-tuning a rich app experience. Unlike most model binding plugins, Stickit does not require any extra markup in your html; in fact, Stickit will clean up your templates, as you will need to interpolate fewer variables (if any at all) while rendering. In Backbone style, Stickit has a simple and flexible api which plugs in nicely to a View's lifecycle.\n\n## Download + Source\n\n[download v0.8.0](http://nytimes.github.com/backbone.stickit/downloads/backbone.stickit_0.8.0.zip)\n\n[download master/edge](https://raw.github.com/NYTimes/backbone.stickit/master/backbone.stickit.js)\n\n[view annotated source](http://nytimes.github.com/backbone.stickit/docs/annotated/)\n\n## Usage\n\nSimilar to `view.events`, you can define `view.bindings` to map selectors to binding configurations. The following bindings configuration will bind the `view.$('#title')` element to the `title` model attribute and the `view.$('#author')` element to the `authorName` model attribute:\n\n```javascript\n  bindings: {\n    '#title': 'title',\n    '#author': 'authorName'\n  }\n```\n\nWhen the view's html is rendered, usually the last call will be to stickit. By convention, and in the following example, stickit will use `view.model` and the `view.bindings` configuration to initialize:\n\n```javascript  \n  render: function() {\n    this.$el.html('<div id=\"title\"/> <input id=\"author\" type=\"text\">');\n    this.stickit();\n  }\n```\n\nOn the initial call, stickit will initialize the innerHTML of `view.$('#title')` with the value of the `title` model attribute, and will setup a one-way binding (model->view) so that any time a model `change:title` event is triggered, the `view.$('#title')` element will reflect those changes. For form elements, like `view.$('#author')`, stickit will configure a two-way binding (model<->view), connecting and reflecting changes in the view elements with changes in bound model attributes.\n\n## API\n\n### stickit\n`view.stickit(optionalModel, optionalBindingsConfig)`\n\nUses `view.bindings` and `view.model` to setup bindings. Optionally, you can pass in a model and bindings hash. Note, it is safe to re-render or call stickit multiple times, as stickit will match any previously bound selectors and their associated models and unbind them before reinitializing.\n\n```javascript  \n  render: function() {\n    this.$el.html(/* ... */);\n    // Initialize stickit with view.bindings and view.model\n    this.stickit();\n    // In addition to, or instead, call stickit with a different model and bindings configuration.\n    this.stickit(this.otherModel, this.otherBindings);\n  }\n```\n\n### addBinding\n`view.addBinding(optionalModel, selector, configuration)`\n\nAdds a single binding to the view, using the given model, or `view.model`, and the given `selector` and `configuration`. It's also possible to pass in a bindings hash as the second parameter. If you use a selector that was already used for a binding, then the old binding will be destroyed before initializing the new binding. \n\n```javascript\n  // Short-form selector.\n  this.addBinding(null, '#author', 'author');\n  // With configuration.\n  this.addBinding(null, '#author', {observe:'author', onGet: function() {/* ... */}});\n  // Or, with a bindings hash.\n  this.addBindings(null, {\n    '#author': {\n      observe: 'author',\n      onGet: function() {/* ... */}\n  });\n```\n\n### unstickit\n`view.unstickit(optionalModel, optionalSelector)`\n\nRemoves event bindings from all models. Optionally, a model can be passed in which will remove events for the given model and its corresponding bindings configuration only. Another option is to pass in a binding selector or bindings hash to granularly remove any bindings that are associated with `this.model` or the given model. Note, Stickit is setup to automatically unbind all bindings associated with a view on `view.remove()`.\n\nFor each model that is unbound, a `stickit:unstuck` event will be triggered, and for each binding that is unbound the `destroy` callback will be executed.\n\n## Bindings\n\nThe `view.bindings` is a hash of jQuery or Zepto selector keys with binding configuration values. Similar to the callback definitions configured in `view.events`, bindings callbacks can be defined as the name of a method on the view or a direct function body. `view.bindings` may also be defined as a function.\n\nOnce you are familiarized with the bindings callbacks, use [this reference](#binding-callbacks-flowchart) for a better idea of when they are called.\n\n### observe\n\nA string, function, or array which is used to map a model attribute to a view element. If binding to `observe` is the only configuration needed, then it can be written in short form where the attribute name is the value of the whole binding configuration.\n\nNotes on binding to an array of attributes: when binding from model->view, this configuration should be paired with an `onGet` callback that can unpack/format the values. When binding from view->model, then `onSet` or `getVal` should be defined and should return an array of values that stickit will set into the model. \n\n```javascript  \n  bindings: {\n    // Short form binding\n    '#author': 'author',\n\n    // Normal binding\n    '#title': {\n      observe: 'title'\n    },\n\n    // Bind to multiple model attributes\n    '#header': {\n      observe: ['title', 'author'],\n      onGet: function(values) {\n        // onGet called after title *or* author model attributes change.\n        return values[0] + '-' + values[1];\n      },\n      onSet: function(value) {\n        return value.split('-');\n      }\n    }\n  }\n\n  // Defined bindings as a function.\n  bindings: function() {\n    return {\n      '#title': {\n        observe: 'title'\n      }\n    };\n  }\n ```\n\n### :el (selector)\n\nA special selector value that binds to the view delegate (view.$el).\n\n```javascript  \n  tagName: 'form',\n  bindings: {\n    ':el': {\n      observe: 'title'\n      onGet: function(value) { /* ... */ }\n    }\n  }\n```\n\n### onGet\n\nA callback which returns a formatted version of the model attribute value that is passed in before setting it in the bound view element.\n\n```javascript  \n  bindings: {\n    '#header': {\n      observe: 'headerName',\n      onGet: 'formatHeader'\n    }\n  },\n  formatHeader: function(value, options) {\n    return options.observe + ': ' + value;\n  }\n ```\n\n### onSet\n\nA callback which prepares a formatted version of the view value before setting it in the model.\n\n```javascript  \n  bindings: {\n    '#author': {\n      observe: 'author',\n      onSet: 'addByline'\n    }\n  },\n  addByline: function(val, options) {\n    return 'by ' + val;\n  }\n```\n\n### getVal\n\nA callback which overrides stickit's default handling for retrieving the value from the bound view element. Use `onSet` to format values - this is better used in [handlers](#custom-handlers) or when extra/different dom operations need to be handled.\n\n```javascript  \n  bindings: {\n    '#author': {\n      observe: 'author',\n      getVal: function($el, event, options) { return $el.val(); }\n    }\n  }\n```\n\n### update\n\nA callback which overrides stickit's default handling for updating the value of a bound view element. Use `onGet` to format model values - this is better used in [handlers](#custom-handlers) or when extra/different dom operations need to be handled .\n\n```javascript  \n  bindings: {\n    '#author': {\n      observe: 'author',\n      update: function($el, val, model, options) { $el.val(val); }\n    }\n  }\n```\n\n### updateModel\n\nA boolean value or a function that returns a boolean value which controls whether or not the model gets changes/updates from the view (model<-view). This is only relevant to form elements, as they have two-way bindings with changes that can be reflected into the model. Defaults to true.\n\n```javascript  \n  bindings: {\n    '#title': {\n      observe: 'title',\n      updateModel: 'confirmFormat'\n    }\n  },\n  confirmFormat: function(val, event, options) {\n    // Only update the title attribute if the value starts with \"by\".\n    return val.startsWith('by ');\n  }\n```\n\n### updateView\n\nA boolean value or a function that returns a boolean value which controls whether or not the bound view element gets changes/updates from the model (view<-model). Defaults to true.\n\n```javascript  \nbindings: {\n  '#title': {\n    observe: 'title',\n    // Any changes to the model will not be reflected to the view.\n    updateView: false\n  }\n}\n```\n\n### afterUpdate\n\nCalled after a value is updated in the dom.\n\n```javascript  \n  bindings: {\n    '#warning': {\n      observe: 'warningMessage',\n      afterUpdate: 'highlight'\n    }\n  },\n  highlight: function($el, val, options) {\n    $el.fadeOut(500, function() { $(this).fadeIn(500); });\n  }\n```\n\n### updateMethod\n\nMethod used to update the inner value of the view element. Defaults to 'text', but 'html' may also be used to update the dom element's innerHTML.\n\n```javascript  \n  bindings: {\n    '#header': {\n      observe: 'headerName',\n      updateMethod: 'html',\n      onGet: function(val) { return '<div id=\"headerVal\">' + val + '</div>'; }\n    }\n  }\n```\n\n### escape\n\nA boolean which when true escapes the model before setting it in the view - internally, gets the attribute value by calling `model.escape('attribute')`. This is only useful when `updateMethod` is \"html\".\n\n```javascript  \n  bindings: {\n    '#header': {\n      observe: 'headerName',\n      updateMethod: 'html',\n      escape: true\n    }\n  }\n```\n\n### initialize\n\nCalled for each binding after it is configured in the initial call to `stickit()`. Useful for setting up third-party plugins, see the handlers section for examples.\n\n```javascript  \n  bindings: {\n    '#album': {\n      observe: 'exai',\n      initialize: function($el, model, options) {\n        // Setup a Chosen or thirdy-party plugin for this bound element.\n      }\n    }\n  }\n```\n\n### destroy\n\nCalled for each binding after it is unstuck from the model and view. Useful for tearing down third-party plugins or events that were configured in `initialze`.\n\n```javascript  \n  bindings: {\n    '#album': {\n      observe: 'Tomorrow\\'s Harvest',\n      destroy: function($el, model, options) {\n        // Tear down any events or clean up.\n      }\n    }\n  }\n```\n\n### visible and visibleFn\n\nWhen true, `visible` shows or hides the view element based on the model attribute's truthiness. `visible` may also be defined with a callback which should return a truthy value.\nThe `updateView` option defaults to `false` when using `visible`. You must opt-in to `updateView` in order to have both view element visibility and value changes bound to the observed attribute.\n\nIf more than the standard jQuery show/hide is required, then you can manually take control by defining `visibleFn` with a callback. \n\n```javascript  \n  bindings: {\n    '#author': {\n      observe: 'isDeleuze',\n      visible: true\n    }\n  }\n```\n\n```javascript  \n  bindings: {\n    '#title': {\n      observe: 'title',\n      visible: function(val, options) { return val == 'Mille Plateaux'; },\n      updateView: true\n    }\n  }\n```\n\n```javascript  \n  bindings: {\n    '#body': {\n      observe: 'isWithoutOrgans',\n      visible: true,\n      visibleFn: 'slideFast'\n    }\n  },\n  slideFast: function($el, isVisible, options) {\n    if (isVisible) $el.slideDown('fast');\n    else $el.slideUp('fast');\n  }\n```\n\n## Form Element Bindings and Contenteditable\n\nBy default, form and contenteditable elements will be configured with two-way bindings, syncing changes in the view elements with model attributes. Optionally, one-way bindings can be configured with `updateView` or `updateModel`. With the `events`, you can specify a different set of events to use for reflecting changes to the model.\n\nThe following is a list of the supported form elements, their binding details, and the default events used for binding:  \n\n - input, textarea, and contenteditable\n   - element value synced with model attribute value\n   - `propertychange`, `input`, `change` events are used for handling\n - input[type=checkbox]\n   - `checked` property determined by the truthiness of the model attribute or if the checkbox \"value\" attribute is defined, then its value is used to match against the model. If a binding selector matches multiple checkboxes then it is expected that the observed model attribute will be an array of values to match against the checkbox value attributes.\n   - `change` event is used for handling\n - input[type=radio]\n   - model attribute value matched to a radio group `value` attribute\n   - `change` event is used for handling\n - select\n   - if you choose to pre-render your select-options (unrecommended) then the binding will be configured with the \"option[value]\" attributes in the DOM; otherwise, see the `selectOptions` configuration.\n   - `change` event is used for handling\n\n### events\n\nSpecify a list of events which will override stickit's default events for a form element. Bound events control when the model is updated with changes in the view element.\n\n```javascript  \n  bindings: {\n    'input#title': {\n      observe: 'title',\n      // Normally, stickit would bind `keyup`, `change`, `cut`, and `paste` events\n      // to an input:text element. The following will override these events and only \n      // update/set the model after the input#title element is blur'ed.\n      events: ['blur']\n    }\n  }\n```\n\n### selectOptions\n\nWith the given `collection`, creates `<option>`s for the bound `<select>`, and binds their selected values to the observed model attribute. It is recommended to use `selectOptions` instead of pre-rendering select-options since Stickit will render them and can bind Objects, Arrays, and non-String values as data to the `<option>` values. The following are configuration options for binding:\n\n - `collection`: an object path of a collection relative to `window` or `view`/`this`, or a string function reference which returns a collection of objects. A collection should be an array of objects, a Backbone.Collection or a value/label map.\n - `labelPath`: the path to the label value for select options within the collection of objects. Default value when undefined is `label`.\n - `valuePath`: the path to the values for select options within the collection of objects. When an options is selected, the value that is defined for the given option is set in the model. Leave this undefined if the whole object is the value or to use the default `value`.\n - `defaultOption`: an object with `label` and `value` keys, used to define a default option value. A common use case would be something like the following: `{label: \"Choose one...\", value: null}`.\n\nWhen bindings are initialized, Stickit will build the `<select>` element with the `<option>`s and bindings configured. `selectOptions` are not required - if left undefined, then Stickit will expect that the `<option>`s are pre-rendered and build the collection from the DOM.\n\n**Note:** if you are using Zepto and referencing object values for your select options, like in the second example, then you will need to also include the Zepto data module. Also, `<select>` bindings are two-way bindings only - `updateView:false` will be ignored.\n\nThe following example references a collection of stooges at `window.app.stooges` and uses the `age` attribute for labels and the `name` attribute for option values:  \n\n```javascript  \n  window.app.stooges = [{name:'moe', age:40}, {name:'larry', age:50}, {name:'curly', age:60}];\n```\n\n```javascript  \n  bindings: {\n    'select#stooges': {\n      observe: 'stooge',\n      selectOptions: {\n        // Alternatively, `this` can be used to reference anything in the view's scope.\n        // For example: `collection:'this.stooges'` would reference `view.stooges`.\n        collection: 'window.app.stooges',\n        labelPath: 'age',\n        valuePath: 'name'\n    }\n  }\n```\nThe following is an example where the default `label` and `value` are used along with a `defaultOption`:\n```javascript\n  bindings: {\n    'select#stooges': {\n      observe: 'stooge',\n      selectOptions: {\n        collection: function() {\n          // No need for `labelPath` or `valuePath` since the defaults\n          // `label` and `value` are used in the collection.\n          return [{value:1, label:'OH'}, {value:2, label:{name:'IN'}}];\n        },\n        defaultOption: {\n          label: 'Choose one...',\n          value: null\n        }\n    }\n  }\n```\n\nThe following is an example where a collection is returned by callback and the collection objects are used as option values:\n\n```javascript\n  bindings: {\n    'select#states': {\n      observe: 'state',\n      selectOptions: {\n        collection: function() {\n          return [{id:1, data:{name:'OH'}}, {id:2, data:{name:'IN'}}];\n        },\n        labelPath: 'data.name'\n        // Leaving `valuePath` undefined so that the collection objects are used \n        // as option values. For example, if the \"OH\" option was selected, then the \n        // following value would be set into the model: `model.set('state', {id:1, data:{name:'OH'}});`\n    }\n  }\n```\n\nOptgroups are supported, where the collection is formatted into an object with an `opt_labels` key that specifies the opt label names and order.\n\n```javascript\n  bindings: {\n    'select#tv-characters': {\n      observe: 'character',\n      selectOptions: {\n        collection: function() {\n          return {\n            'opt_labels': ['Looney Tunes', 'Three Stooges'],\n            'Looney Tunes': [{id: 1, name: 'Bugs Bunny'}, {id: 2, name: 'Donald Duck'}],\n            'Three Stooges': [{id: 3, name: 'moe'}, {id: 4, name: 'larry'}, {id: 5, name: 'curly'}]\n          };\n        },\n        labelPath: 'name',\n        valuePath: 'id'\n      }\n    }\n  }\n```\n\nIt is often useful to have a lookup table for converting between underlying values which are actually stored and transmitted and the human-readable labels that represent them. Such a lookup table (an object like `{ value1: label1, value2: label2 }`) can be used to populate a select directly. By default, the options will be sorted alphabetically by label; pass a `comparator`function or property name string to override this ordering (which delegates to `_.sortBy`).\n\n```javascript\n  bindings: {\n    'select#sounds': {\n      observe: 'sound',\n      selectOptions: {\n        collection: {\n          moo: 'cow',\n          baa: 'sheep',\n          oink: 'pig'\n        }\n      }\n    }\n  }\n```\n\nFinally, multiselects are supported if the select element contains the [multiple=\"true\"] attribute. By default stickit will expect that the model attribute is an array of values, but if your model has a formatted value, you can use `onGet` and `onSet` to format attribute values (this applies to any select bindings).\n\n```javascript\n//\n// model.get('books') returns a dash-delimited list of book ids: \"1-2-4\"\n\nbindings: {\n  '#books': {\n    observe: 'books',\n    onGet: function(val) {\n      // Return an array of the ids so that stickit can match them to select options.\n      return _.map(val.split('-'), Number);\n    },\n    onSet: function(vals) {\n      // Format the array of ids into a dash-delimited String before setting.\n      return vals.join('-');\n    },\n    selectOptions: {\n      collection: 'app.books',\n      labelPath: 'name',\n      valuePath: 'id'\n    }\n  }\n}\n```\n\n### setOptions\n\nAn object which is used as the set options when setting values in the model. This is only used when binding to form elements, as their changes would update the model.\n\n```javascript  \n  bindings: {\n    'input#name': {\n      observe: 'name',\n      setOptions: {silent:true}\n    }\n  }\n```\n\n### stickitChange\n\nA property that is passed into the set options when stickit changes a model attribute. The value of this property is assigned to the binding configuration.\n\n```javascript\nmodel.on('change:observed', function(m, v, options) {\n  if (options.stickitChange) {\n    ...\n  } else {\n    ...\n  }\n});\n\n```\n\n## Attribute and Property Bindings\n\n### attributes\n\nBinds element attributes and properties with observed model attributes, using the following options:\n\n - `name`: attribute or property name.\n - `observe`: observes the given model attribute. If left undefined, then the main configuration `observe` is observed.\n - `onGet`: formats the observed model attribute value before it is set in the matched element.\n\n```javascript  \n  bindings: {\n    '#header': {\n      attributes: [{\n        name: 'class',\n        observe: 'hasWings',\n        onGet: 'formatWings'\n      }, {\n        name: 'readonly',\n        observe: 'isLocked'\n      }]\n    }\n  },\n  formatWings: function(val) {\n    return val ? 'has-wings' : 'no-wings';\n  }\n ```\n\n## Custom Handlers\n\n### addHandler\n`Backbone.Stickit.addHandler(handler_s)`\n\nAdds the given handler or array of handlers to Stickit. A handler is a binding configuration, with an additional `selector` key, that is used to customize or override any of Stickit's default binding handling. To derive a binding configuration, the `selector`s are used to match against a bound element, and any matching handlers  are mixed/extended in the order that they were added. \n\nInternally, Stickit uses `addHandler` to add configuration for its default handling. For example, the following is the internal handler that matches against `textarea` elements:\n\n```javascript\nBackbone.Stickit.addHandler({\n  selector: 'textarea',\n  events: ['keyup', 'change', 'paste', 'cut'],\n  update: function($el, val) { $el.val(val); },\n  getVal: function($el) { return $el.val(); }\n})\n\n```\nExcept for the `selector`, those keys should look familiar since they belong to the binding configuration api. If unspecified, the following keys are defaulted for handlers: `updateModel:true`, `updateView:true`, `updateMethod:'text'`.\n\nBy adding your own `selector:'textarea'` handler, you can override any or all of Stickit's default `textarea` handling. Since binding configurations are derived from handlers with matching selectors, another customization trick would be to add a handler that matches textareas with a specific class name. For example:\n\n```javascript\nBackbone.Stickit.addHandler({\n  selector: 'textarea.trim',\n  getVal: function($el) { return $.trim($el.val()); }\n})\n\n```\nWith this handler in place, anytime you bind to a `textarea`, if the `textarea` contains a `trim` class then this handler will be mixed into the default `textarea` handler and `getVal` will be overridden.\n\nAnother good use for handlers is setup code for third-party plugins. At the end of `View.render`, it is common to include boilerplate third-party initialization code. For example the following sets up a [Chosen](http://harvesthq.github.com/chosen/) multiselect,\n\n```javascript\nrender: function() {\n  this.$el.html(this.template());\n  this.setupChosenSelect(this.$('.friends'), 'friends');\n  this.setupChosenSelect(this.$('.albums'), 'albums');\n}\n\nsetupChosenSelect: function($el, modelAttr) { /* initialize Chosen for the el and map to model */ }\n```\n\nInstead, a handler could be setup to match bound elements that have a `chosen` class and initialize a [Chosen](http://harvesthq.github.com/chosen/) multiselect for the element:\n\n```javascript\n// Setup a generic, global handler for the Chosen plugin.\nBackbone.Stickit.addHandler({\n  selector: 'select.chosen',\n  initialize: function($el, model, options) {\n    $el.chosen();\n    var up = function(m, v, opt) {\n      if (!opt.bindKey) $el.trigger('liszt:updated');\n    };\n    this.listenTo(model, 'change:' + options.observe, up)\n  }\n});\n```\n\n```html\n<!-- A template for the View, marked with the chosen class -->\n<select class=\"friends chosen\" multiple=\"multiple\"></select>\n```\n\n```javascript\n// In a View ...\nbindings: {\n  '.friends': {\n    observe: 'friends',\n    selectOptions: {\n      collection: 'this.friendsCollection'\n    }\n  }\n},\nrender: function() {\n  this.$el.html(this.template());\n  this.stickit(); // Chosen is initialized.\n}\n```\n\n## Binding Callbacks Flowchart\n\nThe following image demonstrates the order in which bindings callbacks are called after stickit is initialized, a bound model attribute changes, and a bound view element changes.\n\n![alt tag](https://raw.github.com/nytimes/backbone.stickit/gh-pages/flow.png)\n\n## F.A.Q.\n\n### Why Stickit?\n\nJavaScript frameworks seem to be headed in the wrong direction - controller callbacks/directives, configuration, and special tags are being forced into the template/presentation layer. Who wants to program and debug templates? \n\nIf you are writing a custom frontend, then you're going to need to write custom JavaScript. Backbone helps you organize with a strong focus on the model, but stays the hell out of your presentation. Configuration and callbacks should only be in one place - the View/JavaScript.\n\n### Dependencies\n\n Backbone 1.0, underscore.js, and jQuery or Zepto (with data module; see `selectOptions`)\n\n### License\n\nMIT\n\n## Change Log\n\n#### 0.8.0\n\n- **Breaking Change**: Calling `view#stickit` a second time with the same model, will no longer unbind all previously bound bindings associated with that model; instead, it will unbind any duplicate bindings (selectors) found in the given bindings hash (or whatever's in `view.bindings`) before initializing.\n- Added an `view#addBinding` which will initiate a single, or hash, of bindings.\n- `view#unstickit` now takes a second, optional, parameter which gives you the control to granularly remove a single, or hash, of bindings.\n\n#### 0.7.0\n\n- **Breaking Change**: the `bindKey` that was passed into the Backbone `change:attr` (undocumented) options was changed to `stickitChange` which is assigned the binding options which have a unique `bindId`.\n- **Breaking Change**: the default events for input, textarea, and contenteditable form elements changed from [`keyup`, `cut`, `paste`, `change`] to [`propertychange`, `input`, `change`].\n- **Breaking Change**: removed support for `input[type=\"number\"]`. Instead, use `onSet` to format Number values, if needed.\n- **Breaking Change**: The `updateModel` method parameters changed so the `event` is now passed as the second parameter. `updateModel(val, options)` -> `updateModel(val, event, options)`\n- Stickit will now load using the UMD pattern so it is compatible with AMD, Node.js, and CommonJS.\n- A view's `bindings` configuration can be defined as a function.\n- When observing an array, if `onSet` or `getVal` return an array of values, Stickit will match the values to their respective attributes defined in `observe` and set them in the model. If you don't desire this change, then you can override this behavior with the following change:\n- Added a `set` callback which by default calls `model#set`\n- Added the `destroy` binding callback to compliment `initialize`.\n- Trigger `stickit:unstick` for each model that is unbound in `unstickit` (or `view.remove`).\n- Added handling for `observe` in function form.\n- When binding with `visible` the `{updateView:false}` property is defaulted.\n- Stickit will no longer sanitize (convert a `null`/`undefined` model attribute value to empty string) values if `onGet` is defined.\n- Added support for the use of dot-notation in binding callbacks that are defined with a string that names a method on the view. For example - `onGet: \"myObj.myCallback\"`.\n- Added Backbone.Stickit.getConfiguration which exposes the method of deriving configurations from handlers.\n- Fixed a bug where \"null\" would show in Chrome when binding `attribute:null` to an element value.\n- Fixed a bug where optgroup `<select>` handlers were rendering multiple `collection.defaultOptions`.\n\n#### 0.6.3\n\n- Added `Backbone.Stickit.addHandler()`, useful for defining a custom configuration for any bindings that match the `handler.selector`. \n- **Breaking Change**: `eventsOverride` was changed to `events`.\n- **Breaking Change**: removed the third param (original value) from the `afterUpdate` parameters.\n- **Breaking Change**: replaced `unstickModel` with `unstickit`.\n- **Breaking Change**: removed deprecated `modelAttr` from bindings api.\n- **Breaking Change**: removed deprecated `format` from bindings api.\n- **Breaking Change**: removed support for null value default/empty options in selectOptions.collection.\n- Added `defaultOption` to the `selectOptions`.\n- Added `initialize` to the bindings api which is called for each binding after it is initialized.\n- Fixed a bug introduced in 0.6.2 where re-rendering/re-sticking wasn't unbinding view events [#66](https://github.com/NYTimes/backbone.stickit/issues/66).\n- Added `update` to the bindings api which is an override for handling how the View element gets updated with Model changes.\n- Added `getVal` to the bindings api which is an override for retrieving the value of the View element. \n- Added support for passing in Backbone.Collection's into `selectOptions.collection`.\n- Added support for referencing the view's scope with a String `selectOptions.collection` reference. For example: `collection:'this.viewCollection'`.\n\n#### 0.6.2\n\n- **Breaking Change**: Changed the last parameter from the model attribute name to the bindings hash in most of the binding callbacks. Note the model attribute name can still be gleaned from the bindings hash - `options.observe`. The following are the callbacks that were affected and their parameters (`options` are the bindings hash):  \n    `onGet(value, options)`  \n    `onSet(value, options)`  \n    `updateModel(value, options)`  \n    `updateView(value, options)`  \n    `afterUpdate($el, value, originalVal, options)`  \n    `visible(value, options)`  \n    `visibleFn($el, isVisible, options)`  \n- Added support for handling multiple checkboxes with one binding/selector and using the `value` attribute, if present, for checkboxes.\n- Added default values for `labelPath` and `valuePath` in selectOptions: `label` and `value` respectively.\n- Refactored event registration to use `$.on` and `$.off` instead of delegating through Backbone which fixed the following bugs:\n    - `view.events` selectors and binding selectors that are equal were overriding [#49](https://github.com/NYTimes/backbone.stickit/issues/49)\n    - `view.events` declared as a function was not supported [#51](https://github.com/NYTimes/backbone.stickit/pull/51)\n- Fixed some bugs and added support requirements for zepto.js; [#58](https://github.com/NYTimes/backbone.stickit/pull/58).\n- Bug Fixes: [#38](https://github.com/NYTimes/backbone.stickit/pull/38), [#42](https://github.com/NYTimes/backbone.stickit/pull/42), \n\n#### 0.6.1\n\n- Added `observe` in place of `modelAttr` (**deprecated** `modelAttr` but maintained for backward-compatibility).\n- Added `onGet` in place of `format` (**deprecated** `format` but maintained for backward-compatibility).\n- Added `onSet` binding for formatting values before setting into the model.\n- Added `updateModel`, a boolean to control changes being reflected from view to model.\n- Added `updateView`, a boolean to control changes being reflected from model to view.\n- Added `eventsOverride` which can be used to specify events for form elements that update the model.\n- **Breaking Change**: Removed manual event configuration/handling (no `keyup`, `submit`, etc, in binding configurations).\n- Added support for multiselect select elements.\n- Added support for optgroups within a select element.\n- Bug Fixes: [#29](https://github.com/NYTimes/backbone.stickit/pull/29), [#31](https://github.com/NYTimes/backbone.stickit/pull/31)\n\n#### 0.6.0\n\n- **Breaking Change**: Removed `readonly` configurtion option.\n- Element properties (like `readonly`, `disabled`, etc.) can be configured in `attributes`.\n- Added custom event handling to the api - see events section in docs.\n- Added support for binding multiple model attributes in `modelAttr` configuration.\n- Added the `visible` and `visibleFn` binding configurations.\n- Added support for `:el` selector for selecting the view delegate.\n- Bug Fixes: [#10](https://github.com/NYTimes/backbone.stickit/issues/1), [#11](https://github.com/NYTimes/backbone.stickit/issues/1), [#16](https://github.com/NYTimes/backbone.stickit/issues/16)\n\n#### 0.5.2\n\n - Fix IE7/8 select options bug ([issue #9](https://github.com/NYTimes/backbone.stickit/pull/9))\n\n#### 0.5.1\n\n - Shorthand binding for model attributes: `'#selector':attrName`.\n - Added support for input[type=number] where values will be bound to model attributes as the Number type.\n - Attribute name is passed in as the second parameter of `format` callbacks.\n - Bug fixes: issue [#1](https://github.com/NYTimes/backbone.stickit/issues/1), [#2](https://github.com/NYTimes/backbone.stickit/issues/2), [#4](https://github.com/NYTimes/backbone.stickit/issues/4), [#6](https://github.com/NYTimes/backbone.stickit/issues/6), [#8](https://github.com/NYTimes/backbone.stickit/issues/8)\n\n#### 0.5.0\n\n - Initial release (extracted and cleaned up from the backend of cn.nytimes.com).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nytimes/backbone.stickit",
  "_id": "backbone.stickit@0.8.0",
  "dist": {
    "shasum": "6f86ee019554bbbbc4e6c6fc9830147ca8df505d"
  },
  "_from": "backbone.stickit@",
  "_resolved": "https://registry.npmjs.org/backbone.stickit/-/backbone.stickit-0.8.0.tgz"
}
