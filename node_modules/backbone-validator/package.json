{
  "name": "backbone-validator",
  "version": "0.1.0",
  "description": "A super simple validator module for Backbone.",
  "author": {
    "name": "Lupo Montero",
    "email": "lupomontero@gmail.com",
    "url": "http://lupomontero.com"
  },
  "contributors": [
    {
      "name": "Patrick Weygand",
      "url": "https://github.com/derduher"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/lupomontero/backbone-validator.git"
  },
  "dependencies": {
    "underscore": "1.5.x"
  },
  "devDependencies": {
    "backbone": "1.1.x",
    "grunt": "~0.4.x",
    "grunt-contrib-nodeunit": "~0.2.x",
    "grunt-contrib-jshint": "~0.7.x",
    "grunt-contrib-uglify": "~0.2.x"
  },
  "scripts": {
    "pretest": "grunt jshint",
    "test": "grunt nodeunit"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "# backbone-validator [![Build Status](https://secure.travis-ci.org/lupomontero/backbone-validator.png)](http://travis-ci.org/lupomontero/backbone-validator)\n\n> A super simple validator module for [Backbone](http://backbonejs.org). It\nworks both on the browser and nodejs.\n\n## Installing\n\nIn node:\n\n    npm install backbone-validator --save\n\nIn the browser make sure that you add the\n[backbone-validator-min.js](https://raw.github.com/lupomontero/backbone-validator/master/backbone-validator-min.js)\nscript after you have loaded both [Underscore](http://underscorejs.org) and\n[Backbone](http://backbonejs.org). The minimised file is 2k.\n\n## Usage\n\n```javascript\nvar Backbone = require('Backbone');\nvar validator = require('validator');\n\nvar MyModel = Backbone.Model.extend({\n  validate: validator.create({\n    type: { equal: 'user', msg: \"type must be `user`\" },\n    firstname: { type: 'string', minLength: 3, maxlength: 20 },\n    email: { type: 'email' }\n  })\n});\n\nvar model = new MyModel();\nmodel.on('invalid', function (m, err) {\n  // Validation failed\n  // `err` will be an object with the error message {type:'message'}.\n});\nmodel.set({ type: 'not user' }, { validate: true });\n```\n\n## API\n\n### validator.create( schema )\n\nTo use this module you basically invoke `validator.create()` passing it a\n`schema` object. This will return a function, and we set the model's `validate`\nproperty to this function, so that `Backbone` can use when setting attribute\nvalues (ie: when `model.save()` is invoked).\n\n### Defining a schema\n\nA `schema` object contains a property for each `attribute` we want to validate,\nthe property name is the `attribute` name and the value is an object containing\na set of rules.\n\nIn the example below we want to validate the `ctime`, `status` and `message`\nattribues in our model, so our schema will look something like this:\n\n```javascript\nvalidator.create({\n  ctime: { type: 'date' },\n  status: { oneOf: [ 1, 2, 3 ] },\n  message: { type: string, minLength: 5 }\n});\n```\n\n### Rules\n\nEache rule is declared passing it `options`. This `options` depend on each of\nthe rules (ie: for the `required` rule `options` is just a boolean, for the\n`oneOf` its an array, for `custom` its a function and so on.\n\n  * `required`\n\n```javascript\nvalidator.create({\n  message: { required: true }\n});\n```\n\n  * `equal`\n\n```javascript\nvalidator.create({\n  type: { equal: 'user' }\n});\n```\n\n  * `regexp`\n\n```javascript\nvalidator.create({\n  birthday: { regexp: /^\\d{2}\\/\\d{2}\\/\\d{4}$/ }\n});\n```\n\n  * `oneOf`\n\n```javascript\nvalidator.create({\n  colour: { oneOf: [ 'red', 'green', 'blue' ] }\n});\n```\n\n  * `type`. Types: `boolean`, `number`, `string`, `date`, `array`, `email`,\n    `model`, `collection`, `url` and `domain`.\n\n```javascript\nvalidator.create({\n  balance: { type: 'number' }\n});\n```\n\n  * `minLength`. Can be used with strings or arrays.\n\n```javascript\nvalidator.create({\n  firstname: { type: 'string', minLength: 3 }\n});\n```\n\n  * `maxLength`. Can be used with strings or arrays.\n\n```javascript\nvalidator.create({\n  firstname: { type: 'string', maxLength: 20, minLength: 2 }\n});\n```\n  \n  * `recurse`. Can be used to do submodel validation.\n\n```javascript\nvalidator.create({\n  submodel: { type: 'model', recurse: true }\n});\n```\n\n### Custom validation rules\n\n```javascript\nvar MyModel = Backbone.Model.extend({\n  validate: validator.create({\n    phone: {\n      custom: function (value) {\n        // This function will be called with the value that needs to be\n        // validated. If you want validation to fail simply return a string with\n        // the error message. If nothing is returned validation for this\n        // attribute is consider to have passed.\n      }\n    }\n  })\n});\n```\n\n### Custom error messages\n\nbackbone-validator comes with default error messages that can be overriden.\n\n```javascript\nvalidator.create({\n  field: { regexp: /aregex/, msg: \"A custom message.\" }\n});\n```\n\n---\n\n## TODO\n\n* Add browser tests.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lupomontero/backbone-validator/issues"
  },
  "homepage": "https://github.com/lupomontero/backbone-validator",
  "_id": "backbone-validator@0.1.0",
  "dist": {
    "shasum": "1b0171af831f866fdc18da2e5855ab16f946a2ea"
  },
  "_from": "backbone-validator@",
  "_resolved": "https://registry.npmjs.org/backbone-validator/-/backbone-validator-0.1.0.tgz"
}
